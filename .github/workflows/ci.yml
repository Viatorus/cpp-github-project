name: Continuous Integration

on: [ push, pull_request ]

jobs:
  checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install clang-format and clang-tidy
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main'
          sudo apt-get install -y clang-format-13 clang-tidy-13
          sudo update-alternatives --remove-all clang-format || true
          sudo update-alternatives --remove-all clang-tidy || true
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-13 1000
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-13 1000
          clang-tidy --version
          clang-format --version

      #      - name: Run code linter
      #        run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

      - name: Configure
        run: cmake --preset=ci-checks

      - name: Build
        run: cmake --build build --config Debug -j $(nproc)

  unit-tests:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Linux GCC 11 C++20",
            os: ubuntu-20.04,
            compiler: gcc,
            version: "11"
          }
          - {
            name: "Linux Clang 13 C++20 / libstdc++",
            os: ubuntu-20.04,
            compiler: clang,
            version: "13"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Install GCC
        id: install_gcc
        if: startsWith(matrix.config.os, 'ubuntu') && ( matrix.config.compiler == 'gcc' )
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          sudo apt-get install -y gcc-${{matrix.config.version}} g++-${{matrix.config.version}}
          echo "CC=gcc-${{ matrix.config.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.config.version }}" >> $GITHUB_ENV

      - name: Install Clang
        id: install_clang
        if: startsWith(matrix.config.os, 'ubuntu') && ( matrix.config.compiler == 'clang' )
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 13
          echo "CC=clang-${{matrix.config.version}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{matrix.config.version}}" >> $GITHUB_ENV

      - name: Configure
        run: cmake --preset=ci-ubuntu

      - name: Build
        run: cmake --build build --config Release -j $(nproc)

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --verbose --output-on-failure -C Release

  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j $(nproc)

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/coverage/coverage.info

  memcheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install valgrind
        run: sudo apt-get install -y valgrind

      - name: Configure
        run: cmake --preset=ci-memcheck

      - name: Build
        run: cmake --build build --config Debug -j $(nproc)

      - name: Install
        run: cmake --install build --config Debug --prefix prefix

      - name: Test
        working-directory: build
        run: |
          if ! ctest --verbose --output-on-failure -C Debug -T memcheck; then
            find Testing/Temporary -name "MemoryChecker.*.log" -exec cat {} +
            exit 1
          fi

  sanitize:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j $(nproc)

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure

  size-test:
    runs-on: ubuntu-latest

    env:
      DOWNLOAD_LINK: https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2

    steps:
      - uses: actions/checkout@v2

      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: gcc-arm-none-eabi-10.3-2021.10
          key: ${{ env.DOWNLOAD_LINK }}

      - name: Install GCC ARM none eabi
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          curl -L $DOWNLOAD_LINK | tar xj

      - name: Configure
        run: cmake --preset=ci-size-coverage

      - name: Build
        run: cmake --build build/size_test -j $(nproc)

      - name: Build
        run: cmake --build build -t size-coverage

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/size_test/size-coverage.info
